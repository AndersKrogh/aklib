#!/usr/bin/perl -w

# This file is part of the aklib c library
# Copyright 2016-2021 by Anders Krogh.
# aklib licensed under the GPLv3, see the file LICENSE.



# Process a spec file and output c code for parsing of command line
# options and arguments
# Make the html doc with:
# pod2html --noindex --title "OptionsAndArguments" OptionsAndArguments > OptionsAndArguments.html


$indent = "      ";


# Read file
@structlines = ();
$structlines[0] = "OPTTYPE_SWITCH,VARTYPE_int,NULL,NULL,NULL,NULL";
$n=1;
$stop=0;
while ( <> ) {
    if (/^HELPTEXT/) { # Scan text until blank ^END reuse line breaks
	$helptext = "";
	while (<>) {
	    last if (/^END/);
	    chop;
	    $helptext .= $_ ."\\n";
	}
	$structlines[0] = "OPTTYPE_SWITCH,VARTYPE_int,NULL,NULL,NULL,\"$helptext\"";
    }

    if (/^NAME\s+(.*?)\s+$/) { print "#define PRGNAME \"$1\"\n"; }

    if (/^SWITCH|^VALUE|^ARG/) {
	# OPTIONTYPE VARTYPE NAME INITIAL_VALUE
	($opt,$var,$names,$initial) = split(/\s+/,$_,4)
	    or die("Didn't understand this:\n$_");
	chop $initial;
	# Read the lines of text following the cmd until blank line
	$text="";
	$break=$indent;
	$stop=1;
	while (<>) {
	    if ($_ =~ /^\s*$/) { $stop=0; last; }
	    chop;
	    $text .= "$break$_"; $break="\\n$indent";
	}
	# defined($text = <>) or die("File ended while scanning option spec");
	# chop $text;
	# $text = $indent . $text;
	$text =~ s/\<br\>/\\n$indent/g;
	@nm = split(/\|/,$names);
	$names = "\|${names}\|";
	$counter = "\&count_$nm[0]";
	# Print variable definitions
	if ($var=~/char\*\*|int\*|double\*/) {
	    # Fixed-size array
	    if ($initial=~/^([0-9]+)\s*$/) {
		print "int count_$nm[0]=$1;\n";
	    }
	    # Array sized by another variable
	    else {
		$counter = "\&$initial";
	    }
	    print "$var $nm[0]=NULL;\n";
	}
	else {
	    print "int count_$nm[0]=0;\n";
	    if ($var=~/char\*/) {
		if ($initial eq "NULL" || $initial eq "") { $initial = "NULL"; }
		else { $initial = "\"$initial\""; }
	    }
	    print "$var $nm[0] = $initial;\n";
	}
	# Make entries
	$var=~s/\*/S/g;
	$structlines[$n] = "OPTTYPE_$opt,VARTYPE_$var,(void *)\&$nm[0],$counter,\"$names\",\"$text\"";
	++$n;

	last if ($stop);
    }
}


# Help switch
print "int count_help=0;\n";
print "int help = 0;\n";
$structlines[$n] = "OPTTYPE_SWITCH,VARTYPE_int,(void *)\&help,(void *)\&count_help,\"|help|h|\",\"${indent}Prints summary of options and arguments\"";
++$n;

# Version switch
print "#ifndef VERSION\n#define VERSION \"0\"\n#endif\n";
print "int count_OPTversion=0;\n";
print "int OPTversion = 0;\n";
$structlines[$n] = "OPTTYPE_SWITCH,VARTYPE_int,(void *)\&OPTversion,(void *)\&count_OPTversion,\"|version|v|\",\"${indent}Prints version number\"";
++$n;

# Last entry holds program name and version
print "#ifndef PRGNAME\n#define PRGNAME \"\"\n#endif\n";
$structlines[$n] = "0,0,NULL,NULL,PRGNAME,VERSION";
++$n;

# Print variable struct
print "\nOPT_STRUCT opt_struct[$n] = {\n";
for ($i=0; $i<$n; ++$i) {
    print "\t{$structlines[$i]}";
    print ",\n" if ($i<$n-1)
}
print "\n};\n";


print <<'END';

// This is how you call the cmd line parser etc
// int main(int argc, char **argv) {
//     OPT_read_cmdline(opt_struct, argc, argv);
//     if (help) OPT_help(opt_struct);
//     OPT_print_vars(stderr, opt_struct, "# ", 0);
// }
END






=pod

=head1 OptionsAndArguments

Usage:
          OptionsAndArguments specification_file

Reads option specifications and outputs c-code for option parsing in
the form of a file that should be included in the main program.

In the c-program you need to include functions used:

 #include "OptionsAndArguments.h"

In main you would typically add these calls to interpret the command line
and print the parameters with "# " at the beginning of each line:

   /* Parsing options and arguments */
 #include "outputFromOptAndArgs.inc"
   OPT_read_cmdline(opt_struct, argc, argv);
   if (help) { OPT_help(opt_struct); exit(0); }
   OPT_print_vars(stderr, opt_struct, "# ", 0);

Here the output from this script is in the file called
outputFromOptAndArgs.inc


Format for each specification in file contains two or more lines:

OPTIONTYPE VARTYPE NAME INITIAL_VALUE
EXPLANATION

OPTIONTYPE is one of "SWITCH", "VALUE" or "ARG"

VARTYPE is one of "int", "double", "char*", "int*", "double*", "char**"

NAME is a word, which is the variable name AND the option name. You can
add aliases (alternative names for the option) with an "|" and no
spaces. E.g., "test|t" means that both -test and -t can be used to
set the variable called test.

INITIAL_VALUE is the initial value assigend to a variable. The whole remaining
line is used excluding the final newline for the initial value (e.g. a string
with blanks).

For arrays INITIAL_VALUE is either:
1) the fixed size of the array or 2) the name of the int
variable with the size of the array, which must be set prior to reading
the array. The initial value of the array is always NULL. Example of an
int array of size 3 and a string array of size determined by wnum:

  VALUE int* intArray|i 3
  VALUE int wnum 2
  VALUE char** words|w wnum

On the command line you can now do e.g. '-i 7 9 13 -wnum 3 -w w1 w2 w3'.

The initial value must be written exactly as one would in c. For instance
a char* can be
initialized with This is\nthe\tinitial string for var xx, which results
in a c initialization: int *xx = "This is\nthe\tinitial string for var xx";
(so the sourounding "s are added if it is a char).

To initialize a char* to NULL, leave the space empty or write NULL.

EXPLANATION is text describing the variable (used with eg -help).
Line breaks are re-used. Note that linebreaks can also be put in with
<br> with no spaces around. Ends at first blank line.

You can also specify a general help text printed first with e.g. -h.
This is text between "HELPTEXT" and "END", both in beginning of
line. Like this:
HELPTEXT
 This is
   help text
END
Formatting will be kept.

There is always an option "-help" (or "-h") which results in printing
of all options and arguments with current values and explanations

Whenever a line starting with one of the OPTIONTYPE's is met, a new option
is assumed, and at least one more line (EXPLANATION) must be present.
All other lines are ignored

=cut

